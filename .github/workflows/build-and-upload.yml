#
# When executed manually, this will upload a ".devNNN" build to testpypi;
# when executed upon a release, it will upload a regular build to pypi.
#
# For pypi, you need to have the PYPI_USERNAME and PYPI_PASSWORD secrets configured.
# For testpypi, you'll need TESTPYPI_USERNAME and TESTPYPI_PASSWORD.
#
name: build & upload

on:
  release:
    types: [ published ]
  workflow_dispatch:

jobs:
  pick-devN:
    name: create .devN build date coordinated across all matrix jobs
    runs-on: ubuntu-latest
    steps:
      - run: TZ='America/New_York' date '+%Y%m%d%H%M' > dev-build.txt

      - uses: actions/upload-artifact@v2
        with:
          name: devN
          path: dev-build.txt

  build-wheel:
    needs: pick-devN
    runs-on: ${{ matrix.os }}
    container: ${{ matrix.container }}
    strategy:
      matrix:
        python_version: ['3.8', '3.9', '3.10']
        os: ['ubuntu-latest', 'macos-latest', 'windows-latest']
        include:
          - os: ubuntu-latest
            container: quay.io/pypa/manylinux2014_x86_64  # https://github.com/pypa/manylinux
          - os: macos-latest
            python_version: 3.8
            upload_source: true   # just need ONE of them to do it

    steps:
      - uses: actions/checkout@v2

      - name: Mark workspace safe for git
        # needed for container and self-hosted runners; see https://github.com/actions/checkout/issues/766
        if: matrix.container != ''
        run: |
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          # setuptool's bdist uses 'git archive' to find files, and fails silently if it can't,
          # leading to missing files in the archive.  Run it separately to force a failure in that case.
          (cd slipcover; git archive --prefix slipcover/ HEAD | tar -t > /dev/null)

      - name: get coordinated .devN
        if: github.event_name != 'release'
        uses: actions/download-artifact@v2
        with:
          name: devN

      - name: set up python (script version)
        if: matrix.container == ''
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python_version }}

      - name: set up python (container version)
        if: matrix.container != ''
        run: |
          PYV=`echo "${{ matrix.python_version }}" | tr -d "."`; ls -d -1 /opt/python/cp$PYV*/bin | head -n 1 >> $GITHUB_PATH
          cat $GITHUB_PATH

      - name: install dependencies
        run: |
          python3 -m pip install setuptools wheel twine

      - name: build wheel (MacOS)
        if: matrix.os == 'macos-latest'
        run: |
            python3 setup.py bdist_wheel --plat-name `python3 -c 'import pkg_resources as pr; p=pr.get_build_platform(); print(p[:p.rindex("-")] + "-universal2")'`

      - name: build wheel (non-MacOS)
        if: matrix.os != 'macos-latest'
        run: |
            python3 setup.py bdist_wheel

      - name: run auditwheel for manylinux
        if: matrix.os == 'ubuntu-latest'
        run: |
          auditwheel repair dist/*.whl
          rm -f dist/*.whl
          mv wheelhouse/*.whl dist/

      - name: build source dist
        if: matrix.upload_source
        run: python3 setup.py sdist

      - name: Non-release (dev) upload
        if: github.event_name != 'release'
        env:
          TWINE_REPOSITORY: testpypi
          TWINE_USERNAME: ${{ secrets.TESTPYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.TESTPYPI_PASSWORD }}
        run: twine upload --verbose dist/*

      - name: Release upload
        if: github.event_name == 'release'
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: twine upload --verbose dist/*
